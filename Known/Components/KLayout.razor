@inherits BaseLayout

<LayoutValue Value="this" IsFixed>
    @if (Context.IsMobileApp)
    {
        <AppLayout>@ChildContent</AppLayout>
    }
    else
    {
        @ChildContent
        <Drawer Closable="true" @bind-Visible="showSetting" Placement="DrawerPlacement.Right" Title="@(Language["Nav.Setting"])" Width="320">
            <SettingForm OnSave="OnSaveSetting" OnReset="OnResetSetting" OnChange="StateHasChanged" />
        </Drawer>
    }
    @if (showSpin)
    {
        <Spin Tip="@spinTip" />
    }
</LayoutValue>

@code {
    private string spinTip = "";
    private bool showSpin = false;
    private bool showSetting = false;

    /// <summary>
    /// 取得或设置子组件内容。
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// 取得或设置加载按钮委托。
    /// </summary>
    [Parameter] public Action<List<MenuInfo>> OnLoadMenus { get; set; }

    /// <summary>
    /// 取得或设置重新加载页面委托。
    /// </summary>
    [Parameter] public Action OnReloadPage { get; set; }

    /// <inheritdoc />
    public override async Task ShowSpinAsync(string text, Func<Task> action)
    {
        if (action == null)
            return;

        showSpin = true;
        spinTip = text;
        await StateChangedAsync();
        await Task.Run(async () =>
        {
            try
            {
                await action?.Invoke();
            }
            catch (Exception ex)
            {
                await OnErrorAsync(ex);
            }
            showSpin = false;
            await StateChangedAsync();
        });
    }

    /// <inheritdoc />
    public override void ReloadPage()
    {
        OnReloadPage?.Invoke();
    }

    /// <summary>
    /// 显示设置表单。
    /// </summary>
    public void ShowSetting()
    {
        showSetting = true;
        StateChanged();
    }

    internal override void LoadMenus()
    {
        OnLoadMenus?.Invoke(UserMenus);
    }

    private async Task OnSaveSetting()
    {
        var result = await Admin.SaveUserSettingAsync(Context.UserSetting);
        if (result.IsValid)
            await OnThemeColorAsync();
    }

    private Task OnResetSetting()
    {
        Context.UserSetting = new();
        return OnSaveSetting();
    }
}
@inherits BaseComponent

<div class="kui-steps-form @Model.Direction">
    <Steps Class="@Model.Class" Current="Model.Current">
        @foreach (var item in Model.Items)
        {
            <Step Title="@Language?.GetTitle(item.Title)"
                  Subtitle="@Language?.GetTitle(item.SubTitle)"
                  Description="@Language?.GetTitle(item.Description)" />
        }
    </Steps>
    <div class="kui-steps-content">
        @if (Model.Items != null && Model.Items.Count > 0)
        {
            @Model.Items[Model.Current].Content
        }
    </div>
    <div class="kui-form-action">
        @if (Model.Current > 0)
        {
            <KButton Type="@ButtonType.Primary" Name="@Language["Button.Previous"]" OnClick="OnPrevClickAsync" />
        }
        @if (Model.Current < StepCount - 1)
        {
            <KButton Type="@ButtonType.Primary" Name="@Language["Button.Next"]" OnClick="OnNextClickAsync" />
        }
        @if (Model.Current == StepCount - 1 && !IsView)
        {
            <KButton Type="@ButtonType.Primary" Name="@Language["Button.Finish"]" OnClick="OnCompleteAsync" />
        }
    </div>
</div>

@code {
    /// <summary>
    /// 取得或设置步骤表单配置模型。
    /// </summary>
    [Parameter] public StepModel Model { get; set; }

    /// <summary>
    /// 取得或设置步骤表单是否是查看模式。
    /// </summary>
    [Parameter] public bool IsView { get; set; }

    /// <summary>
    /// 取得或设置步骤表单是否每一步都保存数据到后台。
    /// </summary>
    [Parameter] public bool IsStepSave { get; set; }

    /// <summary>
    /// 取得或设置步骤表单总步长。
    /// </summary>
    [Parameter] public int? StepCount { get; set; }

    /// <summary>
    /// 取得或设置步骤表单保存数据委托。
    /// </summary>
    [Parameter] public Func<bool, Task<bool>> OnSave { get; set; }

    /// <summary>
    /// 异步初始化步骤表单组件。
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        StepCount ??= Model.Items.Count;
    }

    /// <summary>
    /// 设置步骤表单步长。
    /// </summary>
    /// <param name="count">步长。</param>
    public void SetStepCount(int count)
    {
        StepCount = count;
        StateChanged();
    }

    private async Task OnPrevClickAsync(MouseEventArgs arg)
    {
        if (IsStepSave)
        {
            if (!await SaveAsync())
                return;
        }

        Model.Current--;
    }

    private async Task OnNextClickAsync(MouseEventArgs arg)
    {
        if (IsStepSave)
        {
            if (!await SaveAsync())
                return;
        }

        Model.Current++;
    }

    private async Task OnCompleteAsync(MouseEventArgs arg)
    {
        await SaveAsync(true);
    }

    private async Task<bool> SaveAsync(bool isComplete = false)
    {
        if (IsView)
            return true;

        return await OnSave?.Invoke(isComplete);
    }
}
@inherits BaseComponent

@if (Context.IsEditMode && CanEdit)
{
    <div class="@ClassName">
        <div class="name">@Name</div>
        <div class="action">
            @if (Draggable)
            {
                <span draggable ondragover="event.preventDefault()">
                    <KIcon Icon="drag" />
                </span>
            }
            <AntDropdown Model="Dropdown" />
        </div>
        @ChildContent
    </div>
}
else
{
    @ChildContent
}

@code {
    private string ClassName => CssBuilder.Default("kui-plugin").AddClass(Class).BuildClass();

    /// <summary>
    /// 取得或设置插件样式类。
    /// </summary>
    [Parameter] public string Class { get; set; }

    /// <summary>
    /// 取得或设置插件是否可以编辑，默认可编辑。
    /// </summary>
    [Parameter] public bool CanEdit { get; set; } = true;

    /// <summary>
    /// 取得或设置插件是否可以拖拽。
    /// </summary>
    [Parameter] public bool Draggable { get; set; }

    /// <summary>
    /// 取得或设置插件设置按钮下拉模型。
    /// </summary>
    [Parameter] public DropdownModel Dropdown { get; set; }

    /// <summary>
    /// 取得或设置插件配置下拉菜单项列表。
    /// </summary>
    [Parameter] public List<ActionInfo> Actions { get; set; }

    /// <summary>
    /// 取得或设置子组件内容。
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        Dropdown ??= new DropdownModel
        {
            Icon = "menu",
            Items = Actions,
            TriggerType = "Click",
            OnItemClick = OnItemClickAsync
        };
    }

    private Task OnItemClickAsync(ActionInfo info)
    {
        if (!info.OnClick.HasDelegate)
            return Task.CompletedTask;

        return info.OnClick.InvokeAsync();
    }
}